name: Build and Push Blazor App Images

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'  # Adjust based on your project

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build the App
        run: dotnet build --configuration Release --no-restore

      - name: Run Tests
        run: dotnet test --no-build --configuration Release

      - name: Publish Blazor App
        run: dotnet publish -c Release -o publish_output

      # Extract version from .csproj
      - name: Get Version from .csproj
        id: get_version
        run: |
          VERSION=$(grep -oP '(?<=<Version>)(.*)(?=</Version>)' **/*.csproj)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Check if the Docker image with the version already exists on Docker Hub
      - name: Check if Docker Image Exists on Docker Hub
        id: check_image_exists
        run: |
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/blazor-frontend:${{ env.VERSION }}"
          if docker pull $IMAGE_TAG; then
            echo "Image $IMAGE_TAG already exists. Rejecting build."
            exit 1  # Fail the pipeline if the image already exists
          else
            echo "Image $IMAGE_TAG does not exist. Proceeding with build."
          fi

      # Docker Authentication
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: guillenmartins/blazor-frontend:${{ env.VERSION }}
          dockerfile: 'BlazorCrud/Dockerfile'
          tags: ${{env.VERSION}},latest
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
